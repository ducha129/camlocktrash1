local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui")
local camera = workspace.CurrentCamera

-- Change this to the username of the player you want to lock onto
local targetPlayerName = "TargetPlayerName" -- replace with actual name

-- State toggle
local cameraLockOn = false

-- Create a screen GUI and button
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CameraToggleUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local toggleButton = Instance.new("TextButton")
toggleButton.Name = "ToggleCameraButton"
toggleButton.Size = UDim2.new(0, 140, 0, 40)
toggleButton.Position = UDim2.new(1, -150, 0, 20) -- Top-right corner
toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 20
toggleButton.Text = "Camera Lock: OFF"
toggleButton.Parent = screenGui

-- Function to get the target head
local function getTargetHead()
    local target = Players:FindFirstChild(targetPlayerName)
    if target and target.Character and target.Character:FindFirstChild("Head") then
        return target.Character.Head
    end
    return nil
end

-- Update toggle state
local function toggleCameraLock()
    cameraLockOn = not cameraLockOn
    toggleButton.Text = cameraLockOn and "Camera Lock: ON" or "Camera Lock: OFF"

    if not cameraLockOn then
        camera.CameraType = Enum.CameraType.Custom
    end
end

-- Button click event
toggleButton.MouseButton1Click:Connect(toggleCameraLock)

-- Optional: Add 'T' key as alternate toggle
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.T then
        toggleCameraLock()
    end
end)

-- Lock camera every frame if enabled
RunService:RenderStepped:Connect(function()
    if cameraLockOn then
        local head = getTargetHead()
        if head then
            camera.CameraType = Enum.CameraType.Scriptable
            camera.CFrame = CFrame.new(camera.CFrame.Position, head.Position)
        end
    end
end)
